Дружинин Артем ПИ-91.
Программирование - III.
Отчет по лабораторной №1.
Описание действий:

1) Сначала я перешел на сайт https://gitforwindows.org и скачал с него git и установил его

2) Затем с помощью команд
git config --global user.name Atemyn
git config --global user.email atemyn@mail.ru
я установил свое имя и электронную почту.
После этого я настроил перевод строк текстовых файлов с помощью следующих строк:
git config --global core.autocrlf true
git config --global core.safecrlf warn
Чтобы избежать нечитаемых строк я ввел команду
git config --global core.quotepath off 
3) Чтобы создать каталог мне необходимо было перейти в текущий каталог:
cd /d D:\Git\Lab_1
Создание каталога я произвел командой
mkdir Lab_1_Report
Затем я перешел в него
cd Lab_1_Report

4) В данном каталоге я инициализироал git:
git init

5) После этого создал в нем данный txt файл следующим образом:
NUL> DruzhininArtmen_LR1.txt
и проиндексироал его:
git add DruzhininArtmen_LR1.txt

6) Потом я создал первый коммит:
git commit -m "First commit"

11)
Для игнорирования файлов, я создал собственно файлы, которые буду игнорировать, а именно:
файл temporary.tmp и папку log, содержащую файлы "chtoto.txt" и "chtoto1.txt"
NUL> temporary.tmp
mkdir log
cd log
NUL> chtoto.txt
NUL> chtoto1.txt
cd /d D:\Git\Lab_1\Lab_1_Report
После этого, я создал файл .gitignore, который и будет содержать маски файлов, подлежащих игнорированию
NUL> .gitignore
В нем я написал следующее:
/log
*.tmp
Осталось только добавить его в коммит:
git add .gitignore
git commit -m "Ignore set"

Для показа последних незакоммиченных изменений по сравнению с последним коммитом я пользоался командой
git diff
Для сравнения двух коммитов между собой и вывода их различийя я пользовался командой
git diff 71ab049 140f9c6
, где первое число - это хэш 4-го коммита, а второе число - хэш второго коммита

Сначала я удалил из .gitignore строку *.tmp и добавил файл temporary.tmp в новый коммит, чтобы он был виден для git,
затем для удаления этого файла из последующих коммитов я пользовался командой
git rm temporary.tmp
Однако, в таком случае файл оставался в предыдущих коммитах
Для удаления файла из списка индексированных я пользвоался командой
git rm --cached temporary.tmp
А для удаления файла из всех коммитов можно воспользоаться командой 
git filter-branch --index-filter "git rm --cached --ignore-unmatch D:\Git\Lab_1\Lab_1_Report\temporary.tmp" --prune-empty HEAD

Сначала я создал файл moveThis.txt, который буду перемещать и директорию moveHere, в которую буду перемещать этот файл
и закоммитил их. Для перемещения я воспользовался командой
git mv moveThis.txt moveHere/

12)
Для просмотра истории коммитов можно просто воспользоваться командой git log и данные о коммитах выедутся в полном формате:
commit 24830e18005806e6f6bec7f9936bdddef7233b09
Author: Atemyn <atemyn@mail.ru>
Date:   Fri Sep 4 15:33:15 2020 +0300

    Second Commit

commit 140f9c646cc2969759db65b577db2ca8c31d7c67
Author: Atemyn <atemyn@mail.ru>
Date:   Fri Sep 4 14:56:49 2020 +0300

    First Commit
Также можно воспользоваться, например, командой git log --oneline
и тогда данные выведутся построчно, хэш будет укорочен. а данные об авторе и дате не будут представлены.
В добавление к этом можно пользоваться командами git log --author=<your name> для вывода коммитов определенного автора, командами
git log --since='5 minutes ago'
git log --until='5 minutes ago'
для вывода данных в зависимости от указанного времени, а также командой git log --max-count=2 для вывода определенного числа записей.

13)
Сначала я сделал небольшие изменения в данном файле просто для того, чтобы их потом отменить. Затем я создал коммит, включающий
в себя эти изменения. После этого я задал этому коммиту тег brokenCommit, чтобы потом к нему можно было по этому тегу обратиться.
Итак, чтобы отменить изменения можно воспользоваться несколькими командами в зависимости от ситуации.
Чтобы отменить все изменения, еще не внесенные в Stage, можно воспользоаться командой
git checkout -- .
Чтобы отменить все изменения, уже внесенные в Stage, можно воспользоаться командой
git reset .
После этой команды изменения снова не будут внесены Stage
А если все изменения уже закоммичены (как в моем случае), то можно воспользоваться командой
reset --hard brokenCommit^1
Эта команда откатит изменения к предыдущему коммиту (то есть как бы удалит ненужный коммит), однако удаленный коммит можно увидеть
при помощи команды
git log --all
Чтобы и так его нельзя было увидеть, достаточно просто удалить тег, который мы ему дали командой
git tag -d brokenCommit
Можно откатить все изменения и при помощи команды
git checkout brokenCommit^1
однако тогда ненужный коммит никуда не денется, а вы просто перейдетек предыдущему, а также с помощью команды
git revert brokenCommit
Эта команда создаст новый коммит, который отменяет изменения ненужного коммита, однако сам этот ненужный коммит останется.
Все действия с тегами (метками) можно заменить на работу с хэшем коммита.

14)
Создал новую ветку я с помощью команды
git checkout -b secondBranch
Затем я создал файл ThisIsASecondBranch.txt и закоммитил изменения. Таким образом был добавлен первый коммит в новую ветку.
После этого я создал еще одну ветку:
git checkout -b thirdBranch
и переименовал тот txt файл в ThisIsAThirdBranch.txt. Теперь в каждой из веток было по одному коммиту.
 
Чтобы переключиться на, например, главную ветку я пользовался командой
git checkout master
А, например, на вторую -
git checkout secondBranch
